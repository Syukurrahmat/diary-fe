import { Box, Center, Stack, Text } from '@mantine/core';
import moment from 'moment';
import { useMemo } from 'react';

import styles from './heatmap.module.css';

export const data = {
	date: {
		start: new Date('2024-02-10'),
		end: new Date('2025-01-19'),
	},
	data: [
		true,
		true,
		true,
		false,
		true,
		false,
		false,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false,
		true,
		false,
		true,
		false,
		true,
		false,
		false,
		true,
		true,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		false,
		true,
		false,
		true,
		false,
		false,
		false,
		false,
		false,
		true,
		false,
		true,
		true,
		true,
		false,
		false,
		false,
		false,
		false,
		true,
		false,
		false,
		true,
		true,
		false,
		false,
		false,
		true,
		true,
		false,
		true,
		false,
		true,
		false,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false,
		true,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		false,
		true,
		false,
		false,
		false,
		false,
		true,
		true,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		true,
		true,
		false,
		false,
		true,
		false,
		false,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		true,
		true,
		false,
		false,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		false,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		false,
		true,
		true,
		true,
		false,
		false,
		true,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		true,
		false,
		true,
		false,
		true,
		true,
		false,
		true,
		false,
		true,
		false,
		true,
		false,
		false,
		false,
		false,
		true,
		false,
		true,
		false,
		false,
		true,
		true,
		false,
		false,
		true,
		false,
		true,
		false,
		false,
		true,
		false,
		false,
		false,
		false,
		true,
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		true,
		false,
		true,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		false,
		true,
		false,
		false,
		true,
		false,
		true,
		false,
		false,
		true,
		true,
		false,
		false,
		true,
		true,
		true,
		true,
		false,
		true,
		false,
		true,
		true,
		true,
		false,
		true,
		false,
		false,
		true,
		false,
		false,
		true,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		false,
		false,
		true,
		false,
		true,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		false,
		false,
		false,
		false,
		false,
		true,
		true,
		true,
		true,
		false,
		true,
		true,
		true,
		false,
		true,
		true,
		true,
		false,
		false,
		true,
		true,
		false,
		true,
		true,
		false,
		false,
		false,
		false,
		true,
		true,
		true,
		true,
		false,
		false,
		false,
		true,
	],
};

export function HabitHeatmap({ color }: { color: string }) {
	const offsetDay = moment(data.date.start).day();

	const dd = [...Array(offsetDay).fill(null), ...data.data];

	const gg = useMemo(
		() =>
			generateMonthSpans(
				moment(data.date.start).startOf('week').toDate(),
				data.date.end
			),
		[]
	);

	return (
		<Stack className={styles.wrapper} style={{ '--color': color }}>
			<Box className={styles.monthNameGrid}>
				{gg.map((e, i) => (
					<Text
						className={styles.monthNameGrid}
						key={i}
						style={{ gridColumn: 'span ' + e.span }}
						children={e.name}
					/>
				))}
			</Box>
			<Box className={styles.itemGrid}>
				{dd.map((status, index) => (
					// <Tooltip
					// 	key={index}
					// 	label={moment(data.date.start)
					// 		.add(index - offsetDay, 'd')
					// 		.format('DD MMM')}
					// >
					<Center
						key={index}
						className={styles.item}
						data-status={status}
					/>
					// </Tooltip>
				))}
			</Box>
		</Stack>
	);
}
const generateMonthSpans = (
	startDate: string | Date,
	endDate: string | Date
) => {
	let start = moment(startDate);
	const end = moment(endDate);
	const monthSpans = [];

	while (start.isBefore(end)) {
		const currentMonth = start
			.clone()
			.add(1, 'month')
			.startOf('month')
			.endOf('week');

		const span = currentMonth.diff(start, 'week');

		if (span) {
			monthSpans.push({
				span: currentMonth.diff(start, 'week'),
				name: start.format('MMM'),
			});
		}

		start = currentMonth;
	}

	return monthSpans;
};
